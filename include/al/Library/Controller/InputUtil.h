#pragma once

#include "Controller/PadReplay.h"
#include "IUse/IUseCamera.h"
#include <controller/seadController.h>
#include <controller/seadControllerMgr.h>
#include <gfx/seadColor.h>
#include <math/seadMatrix.h>
#include <math/seadVector.h>

namespace al {
    s32 getJoyPadSingleRightPort(void);
    s32 getJoyPadSingleLeftPort(void);
    s32 getJoyPadDoublePort(void);
    s32 getTouchPanelPort(void);
    s32 getMainControllerPort(void);
    s32 getPlayerControllerPort(s32);
    s32 getMainJoyPadDoublePort(void);
    s32 getMainJoyPadSingleRightPort(void);
    s32 getMainJoyPadSingleLeftPort(void);
    bool isSameNpadId(u32, s32);
    bool isPadTrigger(s32, s32);
    bool isPadTriggerA(s32);
    bool isPadTriggerB(s32);
    bool isPadTriggerX(s32);
    bool isPadTriggerY(s32);
    bool isPadTriggerZL(s32);
    bool isPadTriggerZR(s32);
    bool isPadTriggerL(s32);
    bool isPadTriggerR(s32);
    bool isPadTrigger1(s32);
    bool isPadTrigger2(s32);
    bool isPadTriggerUp(s32);
    bool isPadTriggerDown(s32);
    bool isPadTriggerLeft(s32);
    bool isPadTriggerRight(s32);
    bool isPadTriggerLeftUp(s32);
    bool isPadTriggerLeftDown(s32);
    bool isPadTriggerRightUp(s32);
    bool isPadTriggerRightDown(s32);
    bool isPadTriggerHome(s32);
    bool isPadTriggerStart(s32);
    bool isPadTriggerSelect(s32);
    bool isPadTriggerPlus(s32);
    bool isPadTriggerMinus(s32);
    bool isPadTriggerTouch(void);
    bool isPadTriggerUpLeftStick(s32);
    bool isPadTriggerDownLeftStick(s32);
    bool isPadTriggerLeftLeftStick(s32);
    bool isPadTriggerRightLeftStick(s32);
    bool isPadTriggerUpRightStick(s32);
    bool isPadTriggerDownRightStick(s32);
    bool isPadTriggerLeftRightStick(s32);
    bool isPadTriggerRightRightStick(s32);
    bool isPadTriggerAnyABXY(s32);
    bool isPadTriggerAny(s32);
    bool isPadTriggerLeftStick(s32);
    bool isPadTriggerRightStick(s32);
    bool isPadTriggerPressLeftStick(s32);
    bool isPadTriggerPressRightStick(s32);
    bool isPadHoldPressLeftStick(s32);
    bool isPadHoldPressRightStick(s32);
    void setPadRepeat(s32, s32, s32, s32);
    bool isPadRepeatA(s32);
    bool isPadRepeatB(s32);
    bool isPadRepeatX(s32);
    bool isPadRepeatY(s32);
    bool isPadRepeatZL(s32);
    bool isPadRepeatZR(s32);
    bool isPadRepeatL(s32);
    bool isPadRepeatR(s32);
    bool isPadRepeat1(s32);
    bool isPadRepeat2(s32);
    bool isPadRepeatUp(s32);
    bool isPadRepeatDown(s32);
    bool isPadRepeatLeft(s32);
    bool isPadRepeatRight(s32);
    bool isPadRepeatHome(s32);
    bool isPadRepeatStart(s32);
    bool isPadRepeatSelect(s32);
    bool isPadRepeatPlus(s32);
    bool isPadRepeatMinus(s32);
    bool isPadRepeatTouch(void);
    bool isPadRepeatUpLeftStick(s32);
    bool isPadRepeatDownLeftStick(s32);
    bool isPadRepeatLeftLeftStick(s32);
    bool isPadRepeatRightLeftStick(s32);
    bool isPadRepeatUpRightStick(s32);
    bool isPadRepeatDownRightStick(s32);
    bool isPadRepeatLeftRightStick(s32);
    bool isPadRepeatRightRightStick(s32);
    bool isPadHold(s32, s32);
    bool isPadHoldA(s32);
    bool isPadHoldB(s32);
    bool isPadHoldX(s32);
    bool isPadHoldY(s32);
    bool isPadHoldZL(s32);
    bool isPadHoldZR(s32);
    bool isPadHoldL(s32);
    bool isPadHoldR(s32);
    bool isPadHold1(s32);
    bool isPadHold2(s32);
    bool isPadHoldUp(s32);
    bool isPadHoldDown(s32);
    bool isPadHoldLeft(s32);
    bool isPadHoldRight(s32);
    bool isPadHoldLeftUp(s32);
    bool isPadHoldLeftDown(s32);
    bool isPadHoldRightUp(s32);
    bool isPadHoldRightDown(s32);
    bool isPadHoldHome(s32);
    bool isPadHoldStart(s32);
    bool isPadHoldSelect(s32);
    bool isPadHoldPlus(s32);
    bool isPadHoldMinus(s32);
    bool isPadHoldAny(s32);
    bool isPadHoldAnyWithoutStick(s32);
    bool isPadHoldTouch(void);
    bool isPadHoldUpLeftStick(s32);
    bool isPadHoldDownLeftStick(s32);
    bool isPadHoldLeftLeftStick(s32);
    bool isPadHoldRightLeftStick(s32);
    bool isPadHoldUpRightStick(s32);
    bool isPadHoldDownRightStick(s32);
    bool isPadHoldLeftRightStick(s32);
    bool isPadHoldRightRightStick(s32);
    bool isPadHoldLeftStick(s32);
    bool isPadHoldRightStick(s32);
    bool isPadReleaseA(s32);
    bool isPadReleaseB(s32);
    bool isPadReleaseX(s32);
    bool isPadReleaseY(s32);
    bool isPadReleaseZL(s32);
    bool isPadReleaseZR(s32);
    bool isPadReleaseL(s32);
    bool isPadReleaseR(s32);
    bool isPadRelease1(s32);
    bool isPadRelease2(s32);
    bool isPadReleaseUp(s32);
    bool isPadReleaseDown(s32);
    bool isPadReleaseLeft(s32);
    bool isPadReleaseRight(s32);
    bool isPadReleaseHome(s32);
    bool isPadReleaseStart(s32);
    bool isPadReleaseSelect(s32);
    bool isPadReleasePlus(s32);
    bool isPadReleaseMinus(s32);
    bool isPadReleaseTouch(void);
    bool isPadReleaseUpLeftStick(s32);
    bool isPadReleaseDownLeftStick(s32);
    bool isPadReleaseLeftLeftStick(s32);
    bool isPadReleaseRightLeftStick(s32);
    bool isPadReleaseUpRightStick(s32);
    bool isPadReleaseDownRightStick(s32);
    bool isPadReleaseLeftRightStick(s32);
    bool isPadReleaseRightRightStick(s32);
    const sead::Vector2f &getLeftStick(s32);
    const sead::Vector2f &getRightStick(s32);
    void getPadCrossDir(sead::Vector2f *, s32);
    void getPadCrossDirSideways(sead::Vector2f *, s32);
    void calcTouchScreenPos(sead::Vector2f *);
    void calcTouchLayoutPos(sead::Vector2f *);
    bool isTouchPosInRect(const sead::Vector2f &, const sead::Vector2f &);
    bool isTouchPosInCircle(const sead::Vector2f &, f32);
    bool isTouchPosInCircleByWorldPos(const sead::Vector3f &, const al::IUseCamera *, f32, f32);
    bool isPadTouchRect(f32, f32, f32, f32);
    bool isPadTriggerUiCursorUp(s32);
    bool isPadTriggerUiCursorDown(s32);
    bool isPadTriggerUiCursorLeft(s32);
    bool isPadTriggerUiCursorRight(s32);
    bool isPadRepeatUiCursorUp(s32);
    bool isPadRepeatUiCursorDown(s32);
    bool isPadRepeatUiCursorLeft(s32);
    bool isPadRepeatUiCursorRight(s32);
    bool isPadHoldUiCursorUp(s32);
    bool isPadHoldUiCursorDown(s32);
    bool isPadHoldUiCursorLeft(s32);
    bool isPadHoldUiCursorRight(s32);
    bool isPadReleaseUiCursorUp(s32);
    bool isPadReleaseUiCursorDown(s32);
    bool isPadReleaseUiCursorLeft(s32);
    bool isPadReleaseUiCursorRight(s32);
    s32 getPadAccelerationDeviceNum(s32);
    bool tryGetPadAcceleration(sead::Vector3f *, s32, s32);
    bool isPadConnected(s32);
    bool isShakePadAcceleration(f32, s32, s32);
    bool isPadEnableLeftStick(s32);
    bool isPadEnableRightStick(s32);
    bool isPadExistDeviceSpeaker(s32);
    s32 getPadIdleFrame(s32);
    /*
    void tryGetPortFirstConnected(s32 const *, s32);
    void isPadConnectedJoyPadDouble(void);
    void getPadPoseDeviceNum(s32);
    void tryGetPadPose(sead::Vector3f *, sead::Vector3f *, sead::Vector3f *, s32, s32);
    void getPadPose(sead::Vector3f *, sead::Vector3f *, sead::Vector3f *, s32, s32);
    void getPadPoseMtx(sead::Matrix33<f32> *, s32, s32);
    void getPadPoseRadian(sead::Vector3f *, s32, s32);
    void getPadAngularVelocity(sead::Vector3f *, s32, s32);
    void getPadPoseMainJoySingleLeft(sead::Vector3f *, sead::Vector3f *, sead::Vector3f *);
    void getPadPoseMainJoySingleRight(sead::Vector3f *, sead::Vector3f *, sead::Vector3f *);
    */
    void resetPadPose(s32);
    void resetPadAutoSleepTimeCount(s32);
    bool isPadTypeJoySingle(s32);
    bool isPadTypeJoyDual(s32);
    bool isPadTypeJoyLeft(s32);
    bool isPadTypeJoyRight(s32);
    bool isPadTypeHandheld(s32);
    bool isPadTypeFullKey(s32);
    bool tryGetPadColor(sead::Color4f *, sead::Color4f *, sead::Color4f *, sead::Color4f *, s32);
    bool isEitherPadHoldA(void);
    bool isEitherPadHoldB(void);
}    // namespace al